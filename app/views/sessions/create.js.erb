function binToStr(bin) {
  return btoa(new Uint8Array(bin).reduce(
    (s, byte) => s + String.fromCharCode(byte), ''
  ));
}

function strToBin(str) {
  return Uint8Array.from(atob(str), c => c.charCodeAt(0));
}

var credentialCreationOptions = JSON.parse('<%= @credential_creation_options.to_json.html_safe %>');

credentialCreationOptions["challenge"] = strToBin(credentialCreationOptions["challenge"]);
credentialCreationOptions["user"]["id"] = strToBin(credentialCreationOptions["user"]["id"]);

navigator.credentials.create({ "publicKey": credentialCreationOptions }).then(function(attestation) {
  console.log("Success");

  fetch("/callback", {
    method: "POST",
    body: JSON.stringify({
      id: attestation.id,
      response: {
        clientDataJSON: binToStr(attestation.response.clientDataJSON),
        attestationObject: binToStr(attestation.response.attestationObject)
      }
    }),
    headers: {
      "Content-Type": "application/json",
      "Accept": "application/json",
      "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute("content")
    },
    credentials: 'same-origin'
  }).then(function() { console.log("sent") });
}).catch(function(error) {
  console.log("Failure");
  console.log(error);
});

console.log("Creating new public key credential...");
